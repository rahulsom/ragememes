sourceSets {
  main {
    resources.srcDirs += "$buildDir/generated/resources"
    java.srcDirs += "$buildDir/generated/java"
  }
}

task downloadResources << {
  download {
    src "http://ragefaces.memesoftware.com/download/${zipName}.zip"
    dest "${rootDir}/.cache/${zipName}.zip"
    onlyIfNewer true
  }
  copy {
    from zipTree(file("$rootDir/.cache/${zipName}.zip")).files
    into file("$buildDir/generated/resources/ragememes/${packageName}")
  }
  def className = packageName.split('/').reverse().
      collect { it[0].toUpperCase() + it[1..-1] }.join('') + 'RageMemes'

  def fileName = "$buildDir/generated/java/com/github/rahulsom/ragememes/$packageName/${className}.java"
  file(fileName).parentFile.mkdirs()
  def out = file(fileName).newWriter()

  out.println "package com.github.rahulsom.ragememes.${packageName.replace('/', '.')};"
  out.println ""
  out.println "/**"
  out.println " * Constants for ragememes (autogenerated)"
  out.println " */"
  out.println "public class ${className} {"
  fileTree("$buildDir/generated/resources/ragememes/${packageName}").files.each {
    def constName = it.name.
        replaceAll(/\.[^.]+$/, '').
        replaceAll(/[^A-Za-z0-9]/, '_').
        replaceAll(/^[0-9]/) { num -> "N${num}" }
    out.println "  public static final String ${constName} = \"/ragememes/${packageName}/${it.name}\";"
  }
  out.println "}"
  out.close()
}

processResources.dependsOn downloadResources
compileJava.dependsOn downloadResources
